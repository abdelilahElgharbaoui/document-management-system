version: '3.9'
services:
  ## ============= Mysql =================
  mysql-utilisateurs:
    container_name: mysql-utilisateurs-container
    image: mysql:latest
    restart: unless-stopped
    volumes:
      - "./db-data:/var/lib/mysql" # Persist database data
      - "./init.sql:/docker-entrypoint-initdb.d/init.sql" # Initialization script
    ports:
      - '3307:3306'
    networks:
      - microservices-network
    environment:
      - MYSQL_ROOT_PASSWORD=StrongPassword123
      - MYSQL_DATABASE=utilisateurs

  ## ============= Phpmyadmin =================
  phpmyadmin:
    container_name: phpmyadmin-container
    depends_on:
      - mysql-utilisateurs
    image: phpmyadmin/phpmyadmin
    restart: unless-stopped
    ports:
      - '7080:80'
    networks:
      - microservices-network
    environment:
      - PMA_HOST=mysql-utilisateurs
      - MYSQL_ROOT_PASSWORD=StrongPassword123

  ## ============= Eureka Service =================
  eureka-server:
    container_name: eureka-server-container
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    ports:
      - '8761:8761'
    networks:
      - microservices-network
    restart: unless-stopped

  ## ============= API Gateway =================
  api-gateway:
    container_name: api-gateway-container
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - '8762:8762'
    depends_on:
      - eureka-server
      - mysql-utilisateurs
    restart: unless-stopped
    networks:
      - microservices-network
    environment:
      - eureka.client.service-url.defaultZone=http://eureka-server-container:8761/eureka
      - spring.cloud.gateway.discovery.locator.enabled=true
      - spring.cloud.gateway.discovery.locator.lower-case-service-id=true

      - spring.cloud.gateway.routes[0].id=Msdocuments
      - spring.cloud.gateway.routes[0].uri=lb://Msdocuments
      - spring.cloud.gateway.routes[0].predicates[0]=Path=/api/documents/**
      - spring.cloud.gateway.routes[0].filters[0]=AuthenticationFilter

      - spring.cloud.gateway.routes[1].id=msutilisateur
      - spring.cloud.gateway.routes[1].uri=lb://msutilisateur
      - spring.cloud.gateway.routes[1].predicates[0]=Path=/api/users/**
      - spring.cloud.gateway.routes[1].filters[0]=AuthenticationFilter

      - spring.cloud.gateway.routes[2].id=msSecurity
      - spring.cloud.gateway.routes[2].uri=lb://msSecurity
      - spring.cloud.gateway.routes[2].predicates[0]=Path=/api/auth/**
      - spring.cloud.gateway.routes[2].filters[0]=AuthenticationFilter

      - spring.cloud.gateway.routes[3].id=mspartage
      - spring.cloud.gateway.routes[3].uri=lb://mspartage
      - spring.cloud.gateway.routes[3].predicates[0]=Path=/api/partages/**
      - spring.cloud.gateway.routes[3].filters[0]=AuthenticationFilter

      - spring.cloud.gateway.globalcors.cors-configurations.[/**].allowedOrigins=*
      - spring.cloud.gateway.globalcors.cors-configurations.[/**].allowedMethods=GET,POST,PUT,DELETE,OPTIONS
      - spring.cloud.gateway.globalcors.cors-configurations.[/**].allowedHeaders=*
      - spring.cloud.gateway.globalcors.cors-configurations.[/**].allowCredentials=false

  ## ============= Msdocuments =================
  msdocuments:
    container_name: msdocuments-container
    build:
      context: ./msdocuments
      dockerfile: Dockerfile
    ports:
      - '8082:8082'
    depends_on:
      - eureka-server
      - mysql-utilisateurs
    restart: unless-stopped
    networks:
      - microservices-network
    environment:
      - spring.application.name=Msdocuments
      - spring.datasource.driver-classname=com.mysql.cj.jdbc.Driver
      - spring.datasource.url=jdbc:mysql://mysql-utilisateurs:3306/documents?createDatabaseIfNotExist=true
      - spring.datasource.username=root
      - spring.datasource.password=StrongPassword123
      - eureka.client.service-url.defaultZone=http://eureka-server-container:8761/eureka

  ## ============= Mspartage =================
  mspartage:
    container_name: mspartage-container
    build:
      context: ./mspartage
      dockerfile: Dockerfile
    ports:
      - '8083:8083'
    depends_on:
      - eureka-server
      - mysql-utilisateurs
    restart: unless-stopped
    networks:
      - microservices-network
    environment:
      - spring.application.name=Mspartage
      - spring.datasource.driver-classname=com.mysql.cj.jdbc.Driver
      - spring.datasource.url=jdbc:mysql://mysql-utilisateurs:3306/partage?createDatabaseIfNotExist=true
      - spring.datasource.username=root
      - spring.datasource.password=StrongPassword123
      - eureka.client.service-url.defaultZone=http://eureka-server-container:8761/eureka

  ## ============= Mssecurity =================
  mssecurity:
    container_name: mssecurity-container
    build:
      context: ./mssecurity
      dockerfile: Dockerfile
    ports:
      - '8095:8095'
    depends_on:
      - eureka-server
      - mysql-utilisateurs
    restart: unless-stopped
    networks:
      - microservices-network
    environment:
      - spring.application.name=msSecurity
      - spring.datasource.driver-classname=com.mysql.cj.jdbc.Driver
      - spring.datasource.url=jdbc:mysql://mysql-utilisateurs:3306/jwtdb0001?createDatabaseIfNotExist=true
      - spring.datasource.username=root
      - spring.datasource.password=StrongPassword123
      - eureka.client.service-url.defaultZone=http://eureka-server-container:8761/eureka

  ## ============= Msutilisateur =================
  msutilisateur:
    container_name: msutilisateur-container
    depends_on:
      - eureka-server
      - mysql-utilisateurs
    build:
      context: ./msutilisateur
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - '8096:8080'
    networks:
      - microservices-network
    environment:
      - spring.application.name=msutilisateur
      - spring.datasource.driver-classname=com.mysql.cj.jdbc.Driver
      - spring.datasource.url=jdbc:mysql://mysql-utilisateurs:3306/utilisateurs?createDatabaseIfNotExist=true
      - spring.datasource.username=root
      - spring.datasource.password=StrongPassword123
      - eureka.client.service-url.defaultZone=http://eureka-server-container:8761/eureka

  ## ============= React App =================
  react-app:
    container_name: react-app-container
    build:
      context: ./project
      dockerfile: Dockerfile
    ports:
      - '3000:80'
    restart: unless-stopped
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge
